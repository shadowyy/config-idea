<application>
  <component name="AppStorage">
    <histories>
      <item value="Authentication" />
      <item value="Cairo" />
      <item value="* &lt;p&gt;Spring features such as asynchronous method execution, scheduled task execution, * annotation driven transaction management, and even Spring MVC can be enabled and * configured from {@code @Configuration} classes using their respective &quot;{@code @Enable}&quot; * annotations. See" />
      <item value="* The application should run as a reactive web application and should start an * embedded reactive web server." />
      <item value="/** * Default {@link DateFormat} implementation used by standard Date * serializers and deserializers. For serialization defaults to using * an ISO-8601 compliant format (format String &quot;yyyy-MM-dd'T'HH:mm:ss.SSSZ&quot;) * and for deserialization, both ISO-8601 and RFC-1123." />
      <item value="set Json Prefix" />
      <item value="daily" />
      <item value="dayily" />
      <item value="每周" />
      <item value="每天" />
      <item value="freq" />
      <item value="发送频率" />
      <item value="负责人" />
      <item value="频率" />
      <item value="Between" />
      <item value="* Create a proxy for the wrapped object allowing to typesafely invoke * methods on it using a custom interface * * @param proxyType The interface type that is implemented by the proxy * @return A proxy for the wrapped object */" />
      <item value="* convert sourceObject to desObject,only param type is identical" />
      <item value="Request Header Fields Too Large" />
      <item value="Upgrade Required" />
      <item value="Unprocessable Entity" />
      <item value="Destination Locked" />
      <item value="teapot" />
      <item value="Conflict" />
      <item value="&quot;Request Timeout&quot;" />
      <item value="&quot;Proxy Authentication Required&quot;" />
      <item value="* Fixed count query creation for manually declared queries with &quot;order by&quot; clause (DATAJPA-142)" />
      <item value="Domin" />
      <item value="* Returns the page to be returned." />
      <item value="* Returns the number of items to be returned." />
      <item value="* Defines the projection part of the count query that is generated for pagination. If neither {@link #countQuery()} * not {@link #countProjection()} is configured we will derive the count query from the method name." />
      <item value="pagination" />
      <item value="This will offer * you a more sophisticated interface than the plain {@link EntityManager} ." />
      <item value="* Default implementation of the {@link org.springframework.data.repository.CrudRepository} interface. This will offer * you a more sophisticated interface than the plain {@link EntityManager} ." />
      <item value="Expiretime" />
      <item value="identity" />
      <item value="聚合" />
      <item value="//Can be override by one of class children and you will see child class name in log. Sometimes it can be confusing because log actually is performed in parent class" />
      <item value="Advice" />
      <item value="comma" />
      <item value="sord" />
      <item value="附件" />
      <item value="An annotation on a constructor that shows how the parameters of that constructor correspond to the constructed object's getter methods. For example:" />
      <item value="execute" />
      <item value="whatever size you want to read in at a time" />
      <item value="pharse" />
      <item value="// default name of the CAS attribute for remember me authentication (CAS 3.4.10+)" />
      <item value="* This realm implementation acts as a CAS client to a CAS server for authentication and basic authorization. * &lt;p/&gt; * This realm functions by inspecting a submitted {@link org.apache.shiro.cas.CasToken CasToken} (which essentially * wraps a CAS service ticket) and validates it against the CAS server using a configured CAS * {@link org.jasig.cas.client.validation.TicketValidator TicketValidator}. * &lt;p/&gt; * The {@link #getValidationProtocol() validationProtocol} is {@code CAS} by default, which indicates that a * a {@link org.jasig.cas.client.validation.Cas20ServiceTicketValidator Cas20ServiceTicketValidator} * will be used for ticket validation. You can alternatively set * or {@link org.jasig.cas.client.validation.Saml11TicketValidator Saml11TicketValidator} of CAS client. It is based on * {@link AuthorizingRealm AuthorizingRealm} for both authentication and authorization. User id and attributes are retrieved from the CAS * service ticket validation response during authentication phase. Roles and permissions are computed during authorization phase (according * to the attributes previously retrieved). * * @since 1.2 * @see &lt;a href=&quot;https://github.com/bujiio/buji-pac4j&quot;&gt;buji-pac4j&lt;/a&gt; * @deprecated replaced with Shiro integration in &lt;a href=&quot;https://github.com/bujiio/buji-pac4j&quot;&gt;buji-pac4j&lt;/a&gt;." />
      <item value="Interface used to indicate that a bean should &lt;em&gt;run&lt;/em&gt; when it is contained within * a {@link SpringApplication}. Multiple {@link CommandLineRunner} beans can be defined * within the same application context and can be ordered using the {@link Ordered} * interface or {@link Order @Order} annotation. * &lt;p&gt; * If you need access to {@link ApplicationArguments} instead of the raw String array * consider using {@link ApplicationRunner}." />
      <item value="* &lt;p&gt;Splits a String by Character type as returned by * {@code java.lang.Character.getType(char)}. Groups of contiguous * characters of the same type are returned as complete tokens, with the * following exception: the character of type * {@code Character.UPPERCASE_LETTER}, if any, immediately * preceding a token of type {@code Character.LOWERCASE_LETTER} * will belong to the following token rather than to the preceding, if any, * {@code Character.UPPERCASE_LETTER} token." />
      <item value="selecte" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="145" />
        <entry key="ENGLISH" value="146" />
        <entry key="DANISH" value="1" />
        <entry key="GERMAN" value="1" />
        <entry key="DUTCH" value="1" />
        <entry key="MALAY" value="2" />
        <entry key="SWEDISH" value="1" />
        <entry key="HINDI" value="1" />
        <entry key="INDONESIAN" value="1" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>
<application>
  <component name="AppStorage">
    <histories>
      <item value="// delete all roles on user cathy, so cathy cannot access any resources now." />
      <item value="// Here we use HTTP basic authentication as the way to get the logged-in user name // For simplicity, the credential is not verified, you should implement and use your own // authentication before the authorization. // In this example, we assume &quot;cathy:123&quot; is a legal user." />
      <item value="/** Represents not generating anything or the complete lack of a method. */" />
      <item value="evict" />
      <item value="true if POST only logout is enabled" />
      <item value="* Due to browser pre-fetching, using a GET requests for logout my cause a user to be logged accidentally, for example: * out while typing in an address bar. If &lt;code&gt;postOnlyLogout&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;. Only POST requests will cause * a logout to occur." />
      <item value="logger.warn(&quot;!! DEPRECATED: use the DefaultLogoutHandler component instead of the DefaultCasLogoutHandler component&quot;);" />
      <item value="Authenticate" />
      <item value="Authenticates" />
      <item value="Authorization" />
      <item value="before-destruction" />
      <item value="local" />
      <item value="Authentication" />
      <item value="Cairo" />
      <item value="* &lt;p&gt;Spring features such as asynchronous method execution, scheduled task execution, * annotation driven transaction management, and even Spring MVC can be enabled and * configured from {@code @Configuration} classes using their respective &quot;{@code @Enable}&quot; * annotations. See" />
      <item value="* The application should run as a reactive web application and should start an * embedded reactive web server." />
      <item value="/** * Default {@link DateFormat} implementation used by standard Date * serializers and deserializers. For serialization defaults to using * an ISO-8601 compliant format (format String &quot;yyyy-MM-dd'T'HH:mm:ss.SSSZ&quot;) * and for deserialization, both ISO-8601 and RFC-1123." />
      <item value="set Json Prefix" />
      <item value="daily" />
      <item value="dayily" />
      <item value="每周" />
      <item value="每天" />
      <item value="freq" />
      <item value="发送频率" />
      <item value="负责人" />
      <item value="频率" />
      <item value="Between" />
      <item value="* Create a proxy for the wrapped object allowing to typesafely invoke * methods on it using a custom interface * * @param proxyType The interface type that is implemented by the proxy * @return A proxy for the wrapped object */" />
      <item value="* convert sourceObject to desObject,only param type is identical" />
      <item value="Request Header Fields Too Large" />
      <item value="Upgrade Required" />
      <item value="Unprocessable Entity" />
      <item value="Destination Locked" />
      <item value="teapot" />
      <item value="Conflict" />
      <item value="&quot;Request Timeout&quot;" />
      <item value="&quot;Proxy Authentication Required&quot;" />
      <item value="* Fixed count query creation for manually declared queries with &quot;order by&quot; clause (DATAJPA-142)" />
      <item value="Domin" />
      <item value="* Returns the page to be returned." />
      <item value="* Returns the number of items to be returned." />
      <item value="* Defines the projection part of the count query that is generated for pagination. If neither {@link #countQuery()} * not {@link #countProjection()} is configured we will derive the count query from the method name." />
      <item value="pagination" />
      <item value="This will offer * you a more sophisticated interface than the plain {@link EntityManager} ." />
      <item value="* Default implementation of the {@link org.springframework.data.repository.CrudRepository} interface. This will offer * you a more sophisticated interface than the plain {@link EntityManager} ." />
      <item value="Expiretime" />
      <item value="identity" />
      <item value="聚合" />
      <item value="//Can be override by one of class children and you will see child class name in log. Sometimes it can be confusing because log actually is performed in parent class" />
      <item value="Advice" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="153" />
        <entry key="ENGLISH" value="154" />
        <entry key="DANISH" value="1" />
        <entry key="GERMAN" value="1" />
        <entry key="DUTCH" value="1" />
        <entry key="MALAY" value="2" />
        <entry key="SWEDISH" value="1" />
        <entry key="HINDI" value="1" />
        <entry key="INDONESIAN" value="1" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>
<application>
  <component name="AppStorage">
    <histories>
      <item value="* An base interface for all rich user-defined functions. This class defines methods for * the life cycle of the functions, as well as methods to access the context in which the functions * are executed. */" />
      <item value="* An base interface for all rich user-defined functions. This class defines methods for * the life cycle of the functions, as well as methods to access the context in which the functions" />
      <item value="* &lt;p&gt;This setting will only have effect if checkpointing is enabled for the job." />
      <item value="/** Start from committed offsets in ZK / Kafka brokers of a specific consumer group (default). */" />
      <item value="start from specified epoch timestamp (milliseconds" />
      <item value="start from specified epoch timestamp" />
      <item value="Hungry" />
      <item value="饿" />
      <item value="Defines callback methods to customize the Java-based configuration for * Spring MVC enabled via {@code @EnableWebMvc}. * * &lt;p&gt;{@code @EnableWebMvc}-annotated configuration classes may implement * this interface to be called back and given a chance to customize the * default configuration. * * @author Rossen Stoyanchev * @author Keith Donald * @author David Syer * @since 3.1 */" />
      <item value="* Add Spring MVC lifecycle interceptors for pre- and post-processing of * controller method invocations. Interceptors can be registered to apply * to all requests or be limited to a subset of URL patterns. * &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; that interceptors registered here only apply to * controllers and not to resource handler requests. To intercept requests for * static resources either declare a * {@link org.springframework.web.servlet.handler.MappedInterceptor MappedInterceptor} * bean or switch to advanced configuration mode by extending * {@link org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport * WebMvcConfigurationSupport} and then override {@code resourceHandlerMapping}. */" />
      <item value="* Set if the filter mappings should be matched after any declared filter mappings of * the ServletContext. Defaults to {@code false} indicating the filters are supposed * to be matched before any declared filter mappings of the ServletContext. * @param matchAfter if filter mappings are matched after */" />
      <item value="* Deduces the name for this registration. Will return user specified name or fallback * to convention based naming. *" />
      <item value="// In this demo, we use HTTP basic authentication as the authentication method. // This method retrieves the user name from the HTTP header and passes it to jCasbin. // You can change to your own authentication method like OAuth, JWT, Apache Shiro, etc. // You need to implement this getUser() method to make sure jCasbin can get the // authenticated user name." />
      <item value="// Initialize jCasbin's enforcer with model and policy rules. // Here we load policy from file, you can choose to load policy from database." />
      <item value="// delete all roles on user cathy, so cathy cannot access any resources now." />
      <item value="// Here we use HTTP basic authentication as the way to get the logged-in user name // For simplicity, the credential is not verified, you should implement and use your own // authentication before the authorization. // In this example, we assume &quot;cathy:123&quot; is a legal user." />
      <item value="/** Represents not generating anything or the complete lack of a method. */" />
      <item value="evict" />
      <item value="true if POST only logout is enabled" />
      <item value="* Due to browser pre-fetching, using a GET requests for logout my cause a user to be logged accidentally, for example: * out while typing in an address bar. If &lt;code&gt;postOnlyLogout&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;. Only POST requests will cause * a logout to occur." />
      <item value="logger.warn(&quot;!! DEPRECATED: use the DefaultLogoutHandler component instead of the DefaultCasLogoutHandler component&quot;);" />
      <item value="Authenticate" />
      <item value="Authenticates" />
      <item value="Authorization" />
      <item value="before-destruction" />
      <item value="local" />
      <item value="Authentication" />
      <item value="Cairo" />
      <item value="* &lt;p&gt;Spring features such as asynchronous method execution, scheduled task execution, * annotation driven transaction management, and even Spring MVC can be enabled and * configured from {@code @Configuration} classes using their respective &quot;{@code @Enable}&quot; * annotations. See" />
      <item value="* The application should run as a reactive web application and should start an * embedded reactive web server." />
      <item value="/** * Default {@link DateFormat} implementation used by standard Date * serializers and deserializers. For serialization defaults to using * an ISO-8601 compliant format (format String &quot;yyyy-MM-dd'T'HH:mm:ss.SSSZ&quot;) * and for deserialization, both ISO-8601 and RFC-1123." />
      <item value="set Json Prefix" />
      <item value="daily" />
      <item value="dayily" />
      <item value="每周" />
      <item value="每天" />
      <item value="freq" />
      <item value="发送频率" />
      <item value="负责人" />
      <item value="频率" />
      <item value="Between" />
      <item value="* Create a proxy for the wrapped object allowing to typesafely invoke * methods on it using a custom interface * * @param proxyType The interface type that is implemented by the proxy * @return A proxy for the wrapped object */" />
      <item value="* convert sourceObject to desObject,only param type is identical" />
      <item value="Request Header Fields Too Large" />
      <item value="Upgrade Required" />
      <item value="Unprocessable Entity" />
      <item value="Destination Locked" />
      <item value="teapot" />
      <item value="Conflict" />
      <item value="&quot;Request Timeout&quot;" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="160" />
        <entry key="ENGLISH" value="161" />
        <entry key="DANISH" value="1" />
        <entry key="GERMAN" value="1" />
        <entry key="DUTCH" value="1" />
        <entry key="MALAY" value="2" />
        <entry key="SWEDISH" value="1" />
        <entry key="HINDI" value="1" />
        <entry key="INDONESIAN" value="1" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>